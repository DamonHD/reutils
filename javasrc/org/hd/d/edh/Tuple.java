/*
Copyright (c) 2008-2013, Damon Hart-Davis
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

  * Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

  * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the
    distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

package org.hd.d.edh;

import java.io.Serializable;

/**Support for anonymous tuples such as pairs. */
public final class Tuple
    {
    /**Prevent construction of an instance. */
    private Tuple() { }

    /**A simple immutable pair (though the referenced items may be mutable).
     * Either or both fields can be null.
     * <p />
     * Equality and hash are based on that of the two members.
     */
    public static final class Pair<T1,T2> implements Serializable
        {
        public Pair(final T1 first, final T2 second)
            {
            this.first = first;
            this.second = second;
            }

        /**The first member of the pair. */
        public final T1 first;

        /**The second member of the pair. */
        public final T2 second;

        /**Human-readable form. */
        @Override
        public String toString()
            { return("<" + first + "," + second + ">"); }

        /**Hash is based on that of the two members. */
        @Override
        public int hashCode()
            {
            return(
               ((first == null) ? 1 : first.hashCode()) ^
               ((second == null) ? 2 : second.hashCode())
                      );
            }

        /**Indicates whether some other object is "equal to" this one.
         * With pairwise elements considered equal if both null or equals() is true.
         */
        @Override
        public boolean equals(final Object obj)
            {
            if(this == obj) { return(true); }
            if(!(obj instanceof Pair)) { return(false); }

            final Pair other = (Pair) obj;
            if(first == null)
                { if(other.first != null) { return(false); } }
            else if(!first.equals(other.first)) { return(false); }
            if(second == null)
                { if(other.second != null) { return(false); } }
            else if(!second.equals(other.second)) { return(false); }

            return(true); // Equal!
            }

        /**Unique Serialisation class ID generated by http://random&#46;hd&#46;org/. */
        private static final long serialVersionUID = -5550500104003361224L;
        }


    /**A simple immutable Comparable pair (though the referenced items may be mutable).
     * Either or both fields can be null.
     * <p />
     * Equality and hash are based on that of the two members.
     * <p />
     * The natural ordering given by compareTo() is determined by "first", with "second" breaking ties.
     */
    public static final class ComparablePair<T1 extends Comparable<T1>, T2 extends Comparable<T2>> implements
                                             Serializable, Comparable<ComparablePair<T1,T2>>
        {
        public ComparablePair(final T1 first, final T2 second)
            {
            this.first = first;
            this.second = second;
            }

        /**The first member of the pair. */
        public final T1 first;

        /**The second member of the pair. */
        public final T2 second;

        /**Human-readable form. */
        @Override
        public String toString()
            { return("<" + first + "," + second + ">"); }

        /**Hash is based on that of the two members. */
        @Override
        public int hashCode()
            {
            return(
               ((first == null) ? 101 : first.hashCode()) ^
               ((second == null) ? 2002 : second.hashCode())
                      );
            }

        /**Indicates whether some other object is "equal to" this one.
         */
        @Override
        public boolean equals(final Object obj)
            {
            if(this == obj) { return(true); }
            if(!(obj instanceof ComparablePair)) { return(false); }

            final ComparablePair other = (ComparablePair) obj;
            if(first == null)
                { if(other.first != null) { return(false); } }
            else if(!first.equals(other.first)) { return(false); }
            if(second == null)
                { if(other.second != null) { return(false); } }
            else if(!second.equals(other.second)) { return(false); }

            return(true); // Equal!
            }

        /**The ordering is determined by "first", with "second" breaking ties.
         * Instances with nulls may not be comparable.
         */
        public int compareTo(final ComparablePair<T1,T2> other)
            {
            final int cf = first.compareTo(other.first);
            if(cf != 0) { return(cf); }
            return(second.compareTo(other.second));
            }

        /**Unique Serialisation class ID generated by http://random&#46;hd&#46;org/. */
        private static final long serialVersionUID = -5550500104003361225L;
        }


    /**A simple immutable 3-tuple/triple (though the referenced items may be mutable).
     * Any or all fields can be null.
     * <p />
     * Equality and hash are based on that of the three members.
     */
    public static final class Triple<T1,T2,T3> implements Serializable
        {
        public Triple(final T1 first, final T2 second, final T3 third)
            {
            this.first = first;
            this.second = second;
            this.third = third;
            }

        /**The first member of the triple. */
        public final T1 first;

        /**The second member of the triple. */
        public final T2 second;

        /**The third member of the triple. */
        public final T3 third;

        /**Human-readable form. */
        @Override
        public String toString()
            { return("<" + first + "," + second + "," + third + ">"); }

        /**Hash is based on that of the members. */
        @Override
        public int hashCode()
            {
            return(
               ((first == null) ? -101 : first.hashCode()) ^
               ((second == null) ? -10102 : Integer.rotateRight(second.hashCode(), 11)) ^
               ((third == null) ? -1010103 : Integer.rotateLeft(third.hashCode(), 11))
                      );
            }

        /**Indicates whether some other object is "equal to" this one. */
        @Override
        public boolean equals(final Object obj)
            {
            if(this == obj) { return(true); }
            if(!(obj instanceof Triple)) { return(false); }

            final Triple other = (Triple) obj;
            if(first == null)
                { if(other.first != null) { return(false); } }
            else if(!first.equals(other.first)) { return(false); }
            if(second == null)
                { if(other.second != null) { return(false); } }
            else if(!second.equals(other.second)) { return(false); }
            if(third == null)
                { if(other.third != null) { return(false); } }
            else if(!third.equals(other.third)) { return(false); }

            return(true); // Equal!
            }

        private static final long serialVersionUID = -4570980722385392466L;
        }

    /**A simple immutable Comparable pair (though the referenced items may be mutable).
     * Either or both fields can be null.
     * <p />
     * Equality and hash are based on that of the two members.
     * <p />
     * The natural ordering given by compareTo() is determined by "first", with "second" breaking ties.
     */
    public static final class ComparableTriple<T1 extends Comparable<T1>, T2 extends Comparable<T2>, T3 extends Comparable<T3>> implements
                                             Serializable, Comparable<ComparableTriple<T1,T2,T3>>
        {
        public ComparableTriple(final T1 first, final T2 second, final T3 third)
            {
            this.first = first;
            this.second = second;
            this.third = third;
            }

        /**The first member of the triple. */
        public final T1 first;

        /**The second member of the triple. */
        public final T2 second;

        /**The third member of the triple. */
        public final T3 third;

        /**Human-readable form. */
        @Override
        public String toString()
            { return("<" + first + "," + second + "," + third + ">"); }

        /**Hash is based on that of the members. */
        @Override
        public int hashCode()
            {
            return(
               ((first == null) ? -101 : first.hashCode()) ^
               ((second == null) ? -10102 : second.hashCode()) ^
               ((third == null) ? -1010103 : third.hashCode())
                      );
            }

        /**Indicates whether some other object is "equal to" this one. */
        @Override
        public boolean equals(final Object obj)
            {
            if(this == obj) { return(true); }
            if(!(obj instanceof ComparableTriple)) { return(false); }

            final ComparableTriple other = (ComparableTriple) obj;
            if(first == null)
                { if(other.first != null) { return(false); } }
            else if(!first.equals(other.first)) { return(false); }
            if(second == null)
                { if(other.second != null) { return(false); } }
            else if(!second.equals(other.second)) { return(false); }
            if(third == null)
                { if(other.third != null) { return(false); } }
            else if(!third.equals(other.third)) { return(false); }

            return(true); // Equal!
            }


        /**The ordering is determined by "first", with "second" and then "third" breaking ties.
         * Instances with nulls may not be comparable.
         */
        public int compareTo(final ComparableTriple<T1,T2,T3> other)
            {
            final int cf1 = first.compareTo(other.first);
            if(cf1 != 0) { return(cf1); }
            final int cf2 = second.compareTo(other.second);
            if(cf2 != 0) { return(cf2); }
            return(third.compareTo(other.third));
            }

        private static final long serialVersionUID = -4570980722385392467L;
        }
    }

